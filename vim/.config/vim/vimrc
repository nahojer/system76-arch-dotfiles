" Runtime
let rtp=&runtimepath
set runtimepath=~/.config/vim
let &runtimepath.=','.rtp.',~/.config/vim/after'
set undodir=~/.config/vim/undo//,.

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
if empty(glob('~/.config/vim/autoload/plug.vim'))
		silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.config/vim/plugged')
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'SirVer/ultisnips'
Plug 'fatih/molokai'
Plug 'romainl/vim-qf'
let g:fzf_install = 'yes | ./install'
Plug 'junegunn/fzf', { 'do': g:fzf_install }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'haya14busa/is.vim' " Automatically clear search highlights after you move your cursor.
Plug 'tpope/vim-commentary'
Plug 'ap/vim-css-color'
call plug#end()	

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttimeout
set ttimeoutlen=1
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enabile Autoindent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set relativenumber		" Relative line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw
set noexpandtab tabstop=2 shiftwidth=2
set scrolloff=8
set termguicolors

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.config/vim/tmp/undo//
endif

" Cursor
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
augroup cursor_behaviour
    autocmd!

    " reset cursor on start:
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    " cursor blinking bar on insert mode
    let &t_SI = "\e[5 q"
    " cursor steady block on command mode
    let &t_EI = "\e[2 q"
augroup END

" Colors
syntax on
if !exists("g:syntax_on")
    syntax enable
endif
set background=light
colorscheme boring

""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""
let mapleader = " "

" Act like D and C
nnoremap Y y$

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

"""""""""""""""""""""
" Quickfix list	  
"""""""""""""""""""""
" Toggle
nmap <Leader>q <Plug>(qf_qf_toggle) 
" Go to previous location
nmap [q <Plug>(qf_qf_previous)zz
" Go to next location
nmap ]q <Plug>(qf_qf_next)zz

"""""""""""""""""""""
" Go			      
"""""""""""""""""""""
" Snippets (insert mode + <snippet> + <tab>):
" anon 		-- anonymous function
" : 			-- shorthand variable declaration
" ap 			-- append
" ap= 		-- append assignment
" def			-- defer 
" defr		-- defer recover
" if 			-- if condition
" else 		-- else snippet
" ife			-- if inline error
" errn 		-- error snippet
" errl		-- error log snippet
" errt 		-- error test
" errh 		-- error handle
" for			-- for loop
" fori		-- for integer loop
" forr		-- for range loop
" func 		-- function
" ff 			-- Fmt Printf debug
" fn 			-- Fmt Println debug
" fe			-- Fmt Errorf debug
" few			-- Fmt Errorf wrap
" errnfw  -- Fmt Errorf wrap and return (favorite)
" ok 			-- ok
" st			-- struct
" switch 	-- switch
" tswitch -- type switch
" sp			-- sprintf
" go 			-- goroutine named function
" gof 		-- goroutine anonymous function
" test 		-- test function
" tr 			-- test t.Run
" tt			-- test table snippet
" hf 			-- HTTP handler func
" ter			-- test error handling
" terf 		-- test fatal error
" con			-- constant
" cons		-- constants block
" vars		-- vars block

let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_metalinter_autosave = 1
let g:go_metalinter_deadline = '20s'
let g:go_test_timeout = '10s'

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

augroup END

"""""""""""""""""""""
" Fzf
"""""""""""""""""""""
" Empty value to disable preview window altogether
let g:fzf_preview_window = []
let g:fzf_layout = {'down': '30%'}
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-b': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}

" CTRL-T / CTRL-X / CTRL-V key bindings to open in a new tab, a new split, or in a new vertical split
nnoremap <silent> <Leader>fs :Snippets<CR>
nnoremap <silent> <Leader>fb :Buffers<CR>
nnoremap <silent> <Leader>ff :Files<CR>
nnoremap <silent> <Leader>fm :Marks<CR>
nnoremap <silent> <Leader>gf :GitFiles<CR>
nnoremap <silent> <Leader>gc :BCommits<CR>

"""""""""""""""""""""
" Comments
"""""""""""""""""""""
map gc <Plug>Commentary
nmap gcc <Plug>CommentaryLine

